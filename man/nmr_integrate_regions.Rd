% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nmr_integrate_regions.R
\name{nmr_integrate_regions}
\alias{nmr_integrate_regions}
\alias{nmr_integrate_regions.nmr_dataset_1D}
\title{Integrate regions}
\usage{
nmr_integrate_regions(samples, regions, fix_baseline = TRUE,
  excluded_regions_as_zero = FALSE)

\method{nmr_integrate_regions}{nmr_dataset_1D}(samples, regions,
  fix_baseline = TRUE, excluded_regions_as_zero = FALSE)
}
\arguments{
\item{samples}{A \link{nmr_dataset} object}

\item{regions}{A named list. Each element of the list is a region,
given as a named numeric vector of length two with the range
to integrate. The name of the region will be the name of the
column}

\item{fix_baseline}{A logical. If \code{TRUE} it removes the baseline. See details
below}

\item{excluded_regions_as_zero}{A logical. It determines the behaviour of the
integration when integrating regions that have been excluded. If \code{TRUE},
it will treat those regions as zero. If \code{FALSE} (the default) it will return
NA values.

If \code{fix_baseline} is \code{TRUE}, then the region boundaries are used to estimate
a baseline. The baseline is estimated "connecting the boundaries with a straight
line". Only when the spectrum is above the baseline the area is integrated
(negative contributions due to the baseline estimation are ignored).}
}
\value{
A data frame with the NMRExperiment column and one additional column
for each given region.
}
\description{
Integrate given regions and return a data frame with them
}
\examples{
\dontrun{
# We integrate a region with two peaks and a valley. This is how the
# final area is integrated.
library(ggplot2)
library(signal)
x <- seq(from = 1, to = 11, by = 0.05)
y <- signal::interp1(x = 1:11,
                     y = c(10, 10, 10, 12, 14, 20, 9, 14, 11, 11, 12),
                     xi = x)

xb <- c(which.min(abs(x - 3)), which.min(abs(x - 9)))
basel <- NIHSnmr:::rough_baseline(y[xb[1]:xb[2]])

ggplot(mapping = aes(x = x, y = y)) +
  geom_line(data = data.frame(x = x, y = y)) + 
  geom_polygon(data = data.frame(x = x[c(xb[1]:xb[2], rev(xb[1]:xb[2]))],
                                 y = c(y[xb[1]:xb[2]], rev(basel))),
               fill = "blue") +
  scale_y_continuous(limits = c(5, 20))
}
}
